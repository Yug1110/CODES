class Solution {
	public:
	    int solve(string s1,string s2, int i, int j,vector<vector<int>>&dp){
	        if(i<0 || j<0){
	            return 0;
	        }
	        if(dp[i][j]!=-1) return dp[i][j];
	        if(s1[i]!=s2[j]  || i==j){
	            return dp[i][j]=max(solve(s1,s2,i-1,j,dp),solve(s1,s2,i,j-1,dp));
	        }
	        else{
	            return dp[i][j]=solve(s1,s2,i-1,j-1,dp)+1;
	        }
	    }
	
		int LongestRepeatingSubsequence(string str){
		    // Code here
		     int n = str.length();
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));

    // Fill the table using bottom-up dynamic programming
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (str[i - 1] == str[j - 1] && i != j) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // The result is in dp[n][n]
    return dp[n][n];
		}

};

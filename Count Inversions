class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    long long mergesort(long long arr[],long long temp[],long long lo,long long hi){
        long long mid,inv=0;
        if(hi > lo){
            mid=(lo+hi)/2;
            inv+=mergesort(arr,temp,lo,mid);
            inv+=mergesort(arr,temp,mid+1,hi);
            inv+=merge(arr,temp,lo,mid+1,hi);
        }
        return inv;
    }
    
    long long merge(long long arr[],long long temp[],long long lo,long long mid,long long hi){
        long long i=lo,j=mid,k=lo,inv=0;
        while((i<=mid-1) && (j<=hi)){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                inv+=mid-i;
            }
        }
        while(i<=mid-1){
            temp[k++]=arr[i++];
        }
        while(j<=hi){
            temp[k++]=arr[j++];
        }
        for(i=lo;i<=hi;i++){
            arr[i]=temp[i];
        }
        return inv;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long temp[N];
        return mergesort(arr,temp,0,N-1);
    }

};

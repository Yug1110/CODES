
class Solution{
  public:
  int lcs(int n, int m, string str1, string str2)
    {
        // your code here
        
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

    // Fill the table using bottom-up dynamic programming
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // The result is in dp[n][n]
    return dp[n][m];
        
    }
    int countMin(string str1){
        
    //complete the function here
    int n=str1.length();
        string str2="";
        for(int i=n-1;i>=0;i--){
            str2=str2+str1[i];
        }
        return n-lcs(n,n,str1,str2);
    
    }
};

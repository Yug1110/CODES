class Solution {
public:

    int solve(vector<vector<int>>&grid,int row,int col,int n,int m){
        int nrow,ncol;
        int ans=4;
        nrow=row-1;ncol=col;
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol]==1) ans--;

        nrow=row+1;ncol=col;
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol]==1) ans--;
        nrow=row;ncol=col-1;
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol]==1) ans--;
        nrow=row;ncol=col+1;
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol]==1) ans--;

        return ans;
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<pair<int,int>>v;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    v.push_back({i,j});
                }
            }
        }
        int ans=0;
        for(int i=0;i<v.size();i++){
            ans+=solve(grid,v[i].first,v[i].second,n,m);
        }
        return ans;
    }

};

class Solution {
public:
    bool solveR(vector<vector<char>>&board,int row){
        set<char>s;
        for(int i=0;i<9;i++){
            if(board[row][i]=='.') continue;
            if(s.find(board[row][i])!=s.end()){
                return false;
            }
            s.insert(board[row][i]);
        }
        return true;
    }

    bool solveC(vector<vector<char>>&board,int col){
        set<char>s;
        for(int i=0;i<9;i++){
            if(board[i][col]=='.') continue;
            if(s.find(board[i][col])!=s.end()){
                return false;
            }
            s.insert(board[i][col]);
        }
        return true;
    }

    bool solveB(vector<vector<char>>&board,int row,int col){
        set<char>s;
        for(int i=0;i<=2;i++){
            for(int j=0;j<=2;j++){
                int nrow=row+i;
                int ncol=col+j;

                if(board[nrow][ncol]=='.') continue;
                if(s.find(board[nrow][ncol])!=s.end()){
                    return false;
                }
                s.insert(board[nrow][ncol]);
            }
        }
        return true;
    }


    bool isValidSudoku(vector<vector<char>>& board) {
        // checking all the rows
        for(int i=0;i<9;i++){
            if(!solveR(board,i)){
                return false;
            }
        }

        //checking all the columns
        for(int i=0;i<9;i++){
            if(!solveC(board,i)){
                return false;
            }
        }

        //checking all the boxes
        for(int i=0;i<9;i=i+3){
            for(int j=0;j<9;j=j+3){
                if(!solveB(board,i,j)){
                    return false;
                }
            }
        }
        return true;
    }
};

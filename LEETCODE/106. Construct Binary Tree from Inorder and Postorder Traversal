/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>&inorder, vector<int>&postorder, int postStart, int postEnd, int inStart, int inEnd, unordered_map<int,int>&mp){
        if(postStart>postEnd || inStart>inEnd){
            return NULL;
        }
        
        TreeNode*  root = new TreeNode(postorder[postEnd]);
        
        int pos=mp[root->val];
        int nleft=pos-inStart;
        int nright=inEnd-pos;
        
        root->left=solve(inorder, postorder, postStart, postEnd - nright - 1, inStart,pos-1, mp);
        root->right=solve(inorder, postorder, postEnd - nright,postEnd -1, pos+1, inEnd, mp);
        
        return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int>in;
        int n=inorder.size();
        for(int i=0;i<n;i++){
            in[inorder[i]]=i;
        }
        return solve(inorder,postorder,0,n-1,0,n-1,in);
        
    }
};

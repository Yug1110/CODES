class Solution {
public:
    int solve(vector<vector<int>>&grid,int row,int col,int n,int m, vector<vector<int>>&dp){
        if(row<0 || col<0 || row>=n || col>=m || grid[row][col]==1){
            return 0;
        }
        if(row==n-1 && col==m-1){
            if(grid[row][col]==1){
                return 0;
            }
            return 1;
        }
        if(dp[row][col]!=-1) return dp[row][col];

        //down
        return dp[row][col]=solve(grid,row+1,col,n,m,dp) + solve(grid,row,col+1,n,m,dp);
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solve(obstacleGrid,0,0,n,m,dp);
    }
};

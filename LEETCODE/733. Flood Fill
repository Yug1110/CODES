class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int new_color) {
        int color=image[sr][sc];
        queue<pair<int,int>>q;
        q.push({sr,sc});
        image[sr][sc]=new_color;
        int n=image.size(), m=image[0].size();

        vector<vector<int>>vis(n,vector<int>(m,0));
        vis[sr][sc]=1;

        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();

            int nrow,ncol;

            nrow=row-1;ncol=col;
            if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && image[nrow][ncol]==color && vis[nrow][ncol]==0){
                image[nrow][ncol]=new_color;
                q.push({nrow,ncol});
                vis[nrow][ncol]=1;
            }
            nrow=row+1;ncol=col;
            if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && image[nrow][ncol]==color && vis[nrow][ncol]==0){
                image[nrow][ncol]=new_color;
                q.push({nrow,ncol});
                vis[nrow][ncol]=1;
            }
            nrow=row;ncol=col-1;
            if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && image[nrow][ncol]==color && vis[nrow][ncol]==0){
                image[nrow][ncol]=new_color;
                q.push({nrow,ncol});
                vis[nrow][ncol]=1;
            }
            nrow=row;ncol=col+1;
            if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && image[nrow][ncol]==color && vis[nrow][ncol]==0){
                image[nrow][ncol]=new_color;
                q.push({nrow,ncol});
                vis[nrow][ncol]=1;
            }
        }
        return image;
    }
};
